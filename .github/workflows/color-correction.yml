name: Color Correction API

on:
  issues:
    types: [opened]

jobs:
  process-image:
    # Only run if the issue title starts with "Image Processing Request"
    if: startsWith(github.event.issue.title, 'Image Processing Request')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install opencv-python-headless numpy
    
    - name: Process Image
      id: process
      run: |
        import base64
        import cv2
        import numpy as np
        import sys
        import json
        import os
        import time

        def decode_image(base64_string):
            img_data = base64.b64decode(base64_string)
            nparr = np.frombuffer(img_data, np.uint8)
            return cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        def encode_image(image):
            _, buffer = cv2.imencode('.jpg', image)
            return base64.b64encode(buffer).decode('utf-8')

        def process_image(input_img, ref_img):
            # Convert to LAB color space
            input_lab = cv2.cvtColor(input_img, cv2.COLOR_BGR2LAB)
            ref_lab = cv2.cvtColor(ref_img, cv2.COLOR_BGR2LAB)
            
            # Calculate mean and std for both images
            input_mean, input_std = cv2.meanStdDev(input_lab)
            ref_mean, ref_std = cv2.meanStdDev(ref_lab)
            
            # Adjust the input image
            result = np.copy(input_lab)
            for i in range(3):
                result[:,:,i] = ((result[:,:,i] - input_mean[i]) * (ref_std[i] / input_std[i])) + ref_mean[i]
            
            # Convert back to BGR
            result = cv2.cvtColor(result.astype(np.uint8), cv2.COLOR_LAB2BGR)
            return result

        # Get input data from issue body
        issue_data = json.loads(os.environ['ISSUE_BODY'])
        input_data = issue_data['image_data']
        ref_data = issue_data['reference_data']

        # Process images
        input_img = decode_image(input_data)
        ref_img = decode_image(ref_data)
        result = process_image(input_img, ref_img)

        # Save result to file
        timestamp = int(time.time())
        filename = f'processed_{timestamp}.jpg'

        # Create output directory if it doesn't exist
        os.makedirs('processed', exist_ok=True)
        cv2.imwrite(f'processed/{filename}', result)

        # Commit and push the processed image
        os.system('git config --global user.email "actions@github.com"')
        os.system('git config --global user.name "GitHub Actions"')
        os.system('git add processed/*')
        os.system(f'git commit -m "Add processed image {filename}"')
        os.system('git push')

        # Create the result URL
        result_url = f'https://jakergirard.github.io/processed/{filename}'
        
        # Save the URL for the next step
        with open('result_url.txt', 'w') as f:
            f.write(result_url)
      shell: python
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}

    - name: Comment on Issue
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const resultUrl = fs.readFileSync('result_url.txt', 'utf8').trim();
          const result = {
            processed_image_url: resultUrl
          };
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: JSON.stringify(result)
          }); 